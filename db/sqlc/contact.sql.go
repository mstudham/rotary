// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: contact.sql

package db

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
  con_name, con_member
) VALUES (
  $1, $2
)
RETURNING con_id, con_name, con_member, created_at
`

type CreateContactParams struct {
	ConName   sql.NullString
	ConMember sql.NullBool
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact, arg.ConName, arg.ConMember)
	var i Contact
	err := row.Scan(
		&i.ConID,
		&i.ConName,
		&i.ConMember,
		&i.CreatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE con_id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, conID int32) error {
	_, err := q.db.ExecContext(ctx, deleteContact, conID)
	return err
}

const getContact = `-- name: GetContact :one
SELECT con_id, con_name, con_member, created_at FROM contacts
WHERE con_id = $1 LIMIT 1
`

func (q *Queries) GetContact(ctx context.Context, conID int32) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, conID)
	var i Contact
	err := row.Scan(
		&i.ConID,
		&i.ConName,
		&i.ConMember,
		&i.CreatedAt,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT con_id, con_name, con_member, created_at FROM contacts
ORDER BY con_name
`

func (q *Queries) ListContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ConID,
			&i.ConName,
			&i.ConMember,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
  set 
  con_name = $2,
  con_member = $3
WHERE con_id = $1
RETURNING con_id, con_name, con_member, created_at
`

type UpdateContactParams struct {
	ConID     int32
	ConName   sql.NullString
	ConMember sql.NullBool
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact, arg.ConID, arg.ConName, arg.ConMember)
	var i Contact
	err := row.Scan(
		&i.ConID,
		&i.ConName,
		&i.ConMember,
		&i.CreatedAt,
	)
	return i, err
}
