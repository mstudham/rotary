// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: currency.sql

package db

import (
	"context"
	"database/sql"
)

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO currencies (
  cur_code, cur_desc, cur_symbol
) VALUES (
  $1, $2, $3
)
RETURNING cur_id, cur_code, cur_desc, cur_symbol, created_at
`

type CreateCurrencyParams struct {
	CurCode   sql.NullString
	CurDesc   sql.NullString
	CurSymbol sql.NullString
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error) {
	row := q.db.QueryRowContext(ctx, createCurrency, arg.CurCode, arg.CurDesc, arg.CurSymbol)
	var i Currency
	err := row.Scan(
		&i.CurID,
		&i.CurCode,
		&i.CurDesc,
		&i.CurSymbol,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCurrency = `-- name: DeleteCurrency :exec
DELETE FROM currencies
WHERE cur_id = $1
`

func (q *Queries) DeleteCurrency(ctx context.Context, curID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCurrency, curID)
	return err
}

const getCurrency = `-- name: GetCurrency :one
SELECT cur_id, cur_code, cur_desc, cur_symbol, created_at FROM currencies
WHERE cur_id = $1 LIMIT 1
`

func (q *Queries) GetCurrency(ctx context.Context, curID int32) (Currency, error) {
	row := q.db.QueryRowContext(ctx, getCurrency, curID)
	var i Currency
	err := row.Scan(
		&i.CurID,
		&i.CurCode,
		&i.CurDesc,
		&i.CurSymbol,
		&i.CreatedAt,
	)
	return i, err
}

const listCurrencies = `-- name: ListCurrencies :many
SELECT cur_id, cur_code, cur_desc, cur_symbol, created_at FROM currencies
ORDER BY cur_code
`

func (q *Queries) ListCurrencies(ctx context.Context) ([]Currency, error) {
	rows, err := q.db.QueryContext(ctx, listCurrencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.CurID,
			&i.CurCode,
			&i.CurDesc,
			&i.CurSymbol,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurrency = `-- name: UpdateCurrency :one
UPDATE currencies
  set 
  cur_code = $2,
  cur_desc = $3,
  cur_symbol = $4
WHERE cur_id = $1
RETURNING cur_id, cur_code, cur_desc, cur_symbol, created_at
`

type UpdateCurrencyParams struct {
	CurID     int32
	CurCode   sql.NullString
	CurDesc   sql.NullString
	CurSymbol sql.NullString
}

func (q *Queries) UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) (Currency, error) {
	row := q.db.QueryRowContext(ctx, updateCurrency,
		arg.CurID,
		arg.CurCode,
		arg.CurDesc,
		arg.CurSymbol,
	)
	var i Currency
	err := row.Scan(
		&i.CurID,
		&i.CurCode,
		&i.CurDesc,
		&i.CurSymbol,
		&i.CreatedAt,
	)
	return i, err
}
