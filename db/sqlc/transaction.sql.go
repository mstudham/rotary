// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  tra_per_id, tra_date, tra_reference, tra_contact,
  tra_from_to,
  tra_detail,
  tra_source_id,
  tra_analysis_id,
  tra_gross,
  tra_vat,
  tra_net,
  tra_tick.
  tra_group
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING tra_id, tra_per_id, tra_date, tra_reference, tra_contact, tra_from_to, tra_detail, tra_source_id, tra_analysis_id, tra_gross, tra_vat, tra_net, tra_tick, tra_group, created_at
`

type CreateTransactionParams struct {
	TraPerID      sql.NullInt32
	TraDate       sql.NullTime
	TraReference  sql.NullString
	TraContact    sql.NullString
	TraFromTo     sql.NullString
	TraDetail     sql.NullString
	TraSourceID   sql.NullInt32
	TraAnalysisID sql.NullInt32
	TraGross      sql.NullString
	TraVat        sql.NullString
	TraNet        sql.NullString
	TraTick       sql.NullBool
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.TraPerID,
		arg.TraDate,
		arg.TraReference,
		arg.TraContact,
		arg.TraFromTo,
		arg.TraDetail,
		arg.TraSourceID,
		arg.TraAnalysisID,
		arg.TraGross,
		arg.TraVat,
		arg.TraNet,
		arg.TraTick,
	)
	var i Transaction
	err := row.Scan(
		&i.TraID,
		&i.TraPerID,
		&i.TraDate,
		&i.TraReference,
		&i.TraContact,
		&i.TraFromTo,
		&i.TraDetail,
		&i.TraSourceID,
		&i.TraAnalysisID,
		&i.TraGross,
		&i.TraVat,
		&i.TraNet,
		&i.TraTick,
		&i.TraGroup,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE tra_id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, traID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, traID)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT tra_id, tra_per_id, tra_date, tra_reference, tra_contact, tra_from_to, tra_detail, tra_source_id, tra_analysis_id, tra_gross, tra_vat, tra_net, tra_tick, tra_group, created_at FROM transactions
WHERE tra_id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, traID int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, traID)
	var i Transaction
	err := row.Scan(
		&i.TraID,
		&i.TraPerID,
		&i.TraDate,
		&i.TraReference,
		&i.TraContact,
		&i.TraFromTo,
		&i.TraDetail,
		&i.TraSourceID,
		&i.TraAnalysisID,
		&i.TraGross,
		&i.TraVat,
		&i.TraNet,
		&i.TraTick,
		&i.TraGroup,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT tra_id, tra_per_id, tra_date, tra_reference, tra_contact, tra_from_to, tra_detail, tra_source_id, tra_analysis_id, tra_gross, tra_vat, tra_net, tra_tick, tra_group, created_at FROM transactions
ORDER BY tra_id
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TraID,
			&i.TraPerID,
			&i.TraDate,
			&i.TraReference,
			&i.TraContact,
			&i.TraFromTo,
			&i.TraDetail,
			&i.TraSourceID,
			&i.TraAnalysisID,
			&i.TraGross,
			&i.TraVat,
			&i.TraNet,
			&i.TraTick,
			&i.TraGroup,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
  set 
  tra_per_id = $2,
  tra_date = $3,
  tra_reference = $4,
  tra_contact = $5,
  tra_from_to = $6 ,
  tra_detail = $7,
  tra_source_id = $8,
  tra_analysis_id = $9,
  tra_gross = $10,
  tra_vat = $11,
  tra_net = $12,
  tra_tick = $13,
  tra_group = $14
WHERE tra_id = $1
RETURNING tra_id, tra_per_id, tra_date, tra_reference, tra_contact, tra_from_to, tra_detail, tra_source_id, tra_analysis_id, tra_gross, tra_vat, tra_net, tra_tick, tra_group, created_at
`

type UpdateTransactionParams struct {
	TraID         int32
	TraPerID      sql.NullInt32
	TraDate       sql.NullTime
	TraReference  sql.NullString
	TraContact    sql.NullString
	TraFromTo     sql.NullString
	TraDetail     sql.NullString
	TraSourceID   sql.NullInt32
	TraAnalysisID sql.NullInt32
	TraGross      sql.NullString
	TraVat        sql.NullString
	TraNet        sql.NullString
	TraTick       sql.NullBool
	TraGroup      sql.NullString
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.TraID,
		arg.TraPerID,
		arg.TraDate,
		arg.TraReference,
		arg.TraContact,
		arg.TraFromTo,
		arg.TraDetail,
		arg.TraSourceID,
		arg.TraAnalysisID,
		arg.TraGross,
		arg.TraVat,
		arg.TraNet,
		arg.TraTick,
		arg.TraGroup,
	)
	var i Transaction
	err := row.Scan(
		&i.TraID,
		&i.TraPerID,
		&i.TraDate,
		&i.TraReference,
		&i.TraContact,
		&i.TraFromTo,
		&i.TraDetail,
		&i.TraSourceID,
		&i.TraAnalysisID,
		&i.TraGross,
		&i.TraVat,
		&i.TraNet,
		&i.TraTick,
		&i.TraGroup,
		&i.CreatedAt,
	)
	return i, err
}
