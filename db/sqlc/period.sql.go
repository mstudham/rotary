// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: period.sql

package db

import (
	"context"
)

const createPeriod = `-- name: CreatePeriod :one
INSERT INTO periods (
  per_desc
) VALUES (
  $1
)
RETURNING per_id, per_desc, created_at
`

func (q *Queries) CreatePeriod(ctx context.Context, perDesc string) (Period, error) {
	row := q.db.QueryRowContext(ctx, createPeriod, perDesc)
	var i Period
	err := row.Scan(&i.PerID, &i.PerDesc, &i.CreatedAt)
	return i, err
}

const deletePeriod = `-- name: DeletePeriod :exec
DELETE FROM periods
WHERE per_id = $1
`

func (q *Queries) DeletePeriod(ctx context.Context, perID int32) error {
	_, err := q.db.ExecContext(ctx, deletePeriod, perID)
	return err
}

const getPeriod = `-- name: GetPeriod :one
SELECT per_id, per_desc, created_at FROM periods
WHERE per_id = $1 LIMIT 1
`

func (q *Queries) GetPeriod(ctx context.Context, perID int32) (Period, error) {
	row := q.db.QueryRowContext(ctx, getPeriod, perID)
	var i Period
	err := row.Scan(&i.PerID, &i.PerDesc, &i.CreatedAt)
	return i, err
}

const listPeriods = `-- name: ListPeriods :many
SELECT per_id, per_desc, created_at FROM periods
ORDER BY per_desc
`

func (q *Queries) ListPeriods(ctx context.Context) ([]Period, error) {
	rows, err := q.db.QueryContext(ctx, listPeriods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Period
	for rows.Next() {
		var i Period
		if err := rows.Scan(&i.PerID, &i.PerDesc, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePeriod = `-- name: UpdatePeriod :one
UPDATE periods
  set 
  per_desc = $2
WHERE per_id = $1
RETURNING per_id, per_desc, created_at
`

type UpdatePeriodParams struct {
	PerID   int32
	PerDesc string
}

func (q *Queries) UpdatePeriod(ctx context.Context, arg UpdatePeriodParams) (Period, error) {
	row := q.db.QueryRowContext(ctx, updatePeriod, arg.PerID, arg.PerDesc)
	var i Period
	err := row.Scan(&i.PerID, &i.PerDesc, &i.CreatedAt)
	return i, err
}
