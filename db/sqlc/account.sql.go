// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  acc_code, acc_desc, acc_type, acc_pos, acc_source
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING acc_id, acc_code, acc_desc, acc_type, acc_pos, acc_source, created_at
`

type CreateAccountParams struct {
	AccCode   string
	AccDesc   string
	AccType   string
	AccPos    int32
	AccSource bool
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.AccCode,
		arg.AccDesc,
		arg.AccType,
		arg.AccPos,
		arg.AccSource,
	)
	var i Account
	err := row.Scan(
		&i.AccID,
		&i.AccCode,
		&i.AccDesc,
		&i.AccType,
		&i.AccPos,
		&i.AccSource,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE acc_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT acc_id, acc_code, acc_desc, acc_type, acc_pos, acc_source, created_at FROM accounts
WHERE acc_id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accID int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accID)
	var i Account
	err := row.Scan(
		&i.AccID,
		&i.AccCode,
		&i.AccDesc,
		&i.AccType,
		&i.AccPos,
		&i.AccSource,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT acc_id, acc_code, acc_desc, acc_type, acc_pos, acc_source, created_at FROM accounts
ORDER BY acc_code
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccID,
			&i.AccCode,
			&i.AccDesc,
			&i.AccType,
			&i.AccPos,
			&i.AccSource,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
  set 
  acc_code = $2,
  acc_desc = $3,
  acc_type = $4,
  acc_pos = $5, 
  acc_source =$6
WHERE acc_id = $1
RETURNING acc_id, acc_code, acc_desc, acc_type, acc_pos, acc_source, created_at
`

type UpdateAccountParams struct {
	AccID     int32
	AccCode   string
	AccDesc   string
	AccType   string
	AccPos    int32
	AccSource bool
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.AccID,
		arg.AccCode,
		arg.AccDesc,
		arg.AccType,
		arg.AccPos,
		arg.AccSource,
	)
	var i Account
	err := row.Scan(
		&i.AccID,
		&i.AccCode,
		&i.AccDesc,
		&i.AccType,
		&i.AccPos,
		&i.AccSource,
		&i.CreatedAt,
	)
	return i, err
}
